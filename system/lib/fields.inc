<?php
/////////////////////////////////////////////////////////////////////////////
// Copyright (C)2005 6XGate Incorporated
//
// This file is part of Dacomasy
//
// Dacomasy is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// Dacomasy is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
/////////////////////////////////////////////////////////////////////////////
/**
 * Contains constants, classes, and functions for Dacomasy panel fields.
 * 
 * @package Dacomasy
 * @author 6XGate, Inc. <support@sixxgate.com>
 * @copyright 6XGate, Inc. 2005
 * @license http://www.opensource.org/licenses/gpl-license.php GNU GPL
 * @subpackage Fields
 * @version $SixXGate: webapps/dacomasy/www/system/lib/fields.inc,v 1.1.1.1 2005/07/21 22:57:32 matthew Exp $
 */

// Panel Field Types
/**#@+ Dacomasy Panel Field Type. */

/** Index Field */					define ('DACOMASY_FIELDTYPE_INDEX',							0x00, TRUE);
/** Text Field */					define ('DACOMASY_FIELDTYPE_TEXT',							0x01, TRUE);
/** Date or Time Field */			define ('DACOMASY_FIELDTYPE_DATETIME',						0x02, TRUE);
/** Hyperlink Field */				define ('DACOMASY_FIELDTYPE_LINK',							0x03, TRUE);
/** Picture Field */				define ('DACOMASY_FIELDTYPE_PICTURE',						0x04, TRUE);
/** File Field */					define ('DACOMASY_FIELDTYPE_FILE',							0x05, TRUE);
/** List Field */					define ('DACOMASY_FIELDTYPE_LIST',							0x06, TRUE);
/** FieldList Field */				define ('DACOMASY_FIELDTYPE_FIELDLIST',						0x07, TRUE);
/** RichText Field */				define ('DACOMASY_FIELDTYPE_RICHTEXT',						0x08, TRUE);
/** Multi-line Text Field */		define ('DACOMASY_FIELDTYPE_PLAINTEXT',						0x09, TRUE);
/** Boolean Field */				define ('DACOMASY_FIELDTYPE_BOOLEAN',						0x0A, TRUE);
/** Manual Sort Field */			define ('DACOMASY_FIELDTYPE_SUPERSORT',						0x0B, TRUE);
/** Integer Field */				define ('DACOMASY_FIELDTYPE_INTEGER',						0x0C, TRUE);
/** Float Field */					define ('DACOMASY_FIELDTYPE_FLOAT',							0x0D, TRUE);
/** Currency Field */				define ('DACOMASY_FIELDTYPE_CURRENCY',						0x0E, TRUE);
/** Password Field */				define ('DACOMASY_FIELDTYPE_PASSWORD',						0x0F, TRUE);
/** Module Permissions Field */		define ('DACOMASY_FIELDTYPE_MODULEPERMISSION',				0x10, TRUE);

/**#@-*/

/**
 * The basic structure to implement a Dacomasy panel fields.
 * 
 * A panel field class used by Dacomasy functions must implement this interface to properly function.
 * @package Dacomasy
 */
interface IDacomasyField {
	// Required variables
	// var $Name;			// string
	// var $Label;			// string
	// var $EditOnly;		// boolean
	// var $InTable;		// boolean
	// var $AllowNull;		// boolean
	
	/**
	 * Gets the SELECT query parts to fetch a field from the database.
	 *
	 * @param array The field declaration generated by CreateFieldDeclaration method.
	 * @param string The name of the table that this panel field belongs.
	 * @param boolean Indicates if a record is being edited or listed.
	 * @return array Contains the portions of the SQL SELECT statement.
	 * @see CreateFieldDeclaration()
	 */
	static function GetFetchQuery (&$FieldDeclare, $TableName, $IsList = FALSE);
	
	/**
	 * Generates the HTML code for the panel field.
	 * 
	 * @param array The field declaration generated by CreateFieldDeclaration method.
	 * @param array An array of values that contain the values for the fields.
	 * @param boolean Indicates if a record is being edited or added.
	 * @return string Contains the HTML for the panel field.
	 * @see CreateFieldDeclaration(), PrepareValues(), UnprepareValues()
	 */
	static function GenerateField (&$FieldDeclare, &$Values, $IsEdit = FALSE);
	
	/**
	 * Gets the values of a panel field from a form's POST data.
	 *
	 * @param array The field declaration generated by CreateFieldDeclaration method.
	 * @param array An array of values to add the contents.
	 * @return boolean Is true on success or false on error.
	 * @see CreateFieldDeclaration(), GenerateField()
	 */
	static function GetPostValues (&$FieldDeclare, &$Values);
	
	/**
	 * Prepares a set of values for use in generating UPDATE and INSERT queries.
	 *
	 * @param array The field declaration generated by CreateFieldDeclaration method.
	 * @param array An array of values that contain the values for the fields.
	 * @return boolean Is true on success or false on error.
	 * @see CreateFieldDeclaration(), UnprepareValues()
	 */
	static function PrepareValues (&$FieldDeclare, &$Values);
	
	/**
	 * Prepares a set of values for use in HTML forms when adding and editing records.
	 *
	 * @param array The field declaration generated by CreateFieldDeclaration method.
	 * @param array An array of values that contain the values for the fields.
	 * @return boolean Is true on success or false on error.
	 * @see CreateFieldDeclaration(), PrepareValues()
	 */
	static function UnprepareValues (&$FieldDeclare, &$Values);
	
	/**
	 * @ignore
	 */
	static function GetFieldTypeInfo ();
	
	/**
	 * Creates a field declaration for the panel field.
	 *
	 * @param object DOMElement A XML DOM Element object from the PHP5 DOM extension.
	 * @param array A loaded module structure.
	 * @param number The index of the panel.
	 * @return array A FieldDeclaration structure.
	 */
	static function CreateFieldDeclaration (&$DOMElement, $module, $panelIndex);
	
	/**
	 * Generates the SET "field=value" SQL statements to insert or update a panel field.
	 *
	 * @param array The field declaration generated by CreateFieldDeclaration method.
	 * @param string The name of the table that this panel field belongs.
	 * @param array An array of values that contain the values for the fields.
	 * @param boolean Indicates if a record is being edited or added.
	 * @return array An array that contains the SET and WHERE parts of the UPDATE and INSERT statements (WHERE not on INSERT).
	 * @see CreateFieldDeclaration(), PrepareValues(), UnprepareValues()
	 */
	static function GetSetQuery(&$FieldDeclare, $TableName, &$Values, $IsEdit = FALSE);
	
	/**
	 * Gets the values array from a record fetched from the panel's database table.
	 *
	 * @param array The field declaration generated by CreateFieldDeclaration method.
	 * @param array An associative array of fields in the record.
	 * @param array An array of values to add the contents.
	 * @return boolean Is true on success or false on error.
	 * @see CreateFieldDeclaration(), UnprepareValues()
	 */
	static function GetRecordValues (&$FieldDeclare, &$RecordArray, &$Values);
	
	/**
	 * Validates field entries and returns an array of messages about the invalid fields.
	 *
	 * @param array The field declaration generated by CreateFieldDeclaration method.
	 * @param array An array of values that contain the values for the fields.
	 * @param array An array of messages about invalid fields to add messages.
	 * @param boolean Indicates if a record is being edited or added.
	 * @return boolean Is true if the field is valid, false if the field is invalid or on error.  InvalidMsg will be null on error.
	 * @see CreateFieldDeclaration()
	 */
	static function ValidateValues(&$FieldDeclare, &$Values, &$InvalidMsg, $IsEdit = FALSE);
	
	/**
	 * Adds a RecordSet field to a RecordSet structure
	 *
	 * @param array The field declaration generated by CreateFieldDeclaration method.
	 * @param array A RecordSet structure to add the field.
	 * @return boolean Is true on success or false on error.
	 * @see CreateFieldDeclaration(), GetRecordSetRecordField()
	 */
	static function GetRecordSetField(&$FieldDeclare, &$RecordSet);
	
	/**
	 * Adds a RecordSet record field to a RecordSet structure
	 *
	 * @param array The field declaration generated by CreateFieldDeclaration method.
	 * @param array A RecordSet structure to add the field.
	 * @param array A record from which to get the field data.
	 * @param number The index of the record.
	 * @return boolean Is true on success or false on error.
	 * @see CreateFieldDeclaration(), GetRecordSetField()
	 */
	static function GetRecordSetRecordField(&$FieldDeclare, &$RecordSet, &$Record, $RecordIndex);
}

@$DacomasyField;
// Needed to add the class
// $DacomasyField[DACOMASY_FIELDTYPE_CONSTANT] = new IDacomasyField;
// $DacomasyField['fieldname'] = &$DacomasyField[DACOMASY_FIELDTYPE_CONSTANT];

/**
 * Gets common information about a field for the FieldDeclaration structure.
 *
 * @param object DOMElement A XML DOM Element from PHP5 DOM extension.
 * @param array A FieldDeclaration structure to add the common fields.
 * @return boolean Is true on success or false on error.
 */
function DacomasyGetCommonFieldData (&$DOMElement, &$FieldDeclare) {
	$FieldDeclare['Name'] = $DOMElement->getAttribute('name');
	$FieldDeclare['Label'] = $DOMElement->getAttribute('label');
	$FieldDeclare['EditOnly'] = DacomasyGetBoolean($DOMElement->getAttribute('editonly'), FALSE);
	$FieldDeclare['InTable'] = DacomasyGetBoolean($DOMElement->getAttribute('intable'), FALSE);
	$FieldDeclare['AllowNull'] = DacomasyGetBoolean($DOMElement->getAttribute('allownull'), FALSE);
	return TRUE;
}

/**
 * Prepares a set of values for use in generating UPDATE and INSERT queries.
 *
 * @param array A loaded Dacomasy module that the panel is from.
 * @param number The index of the panel.
 * @param array An array of values that contain the values for the fields.
 * @return boolean Is true on success or false on error.
 */
function DacomasyPrepareValuesArray(&$module, $panelIndex, &$Values) {
	global $DacomasyField;
	$FieldSet = DacomasyGetStructure($module, $panelIndex);
	
	for ($f = 0; $f < count($FieldSet); $f++) $DacomasyField[$FieldSet[$f]['Type']]->PrepareValues($FieldSet[$f], $Values);
	
	DacomasySetLastError(__DACOMASY_ERROR_SUCCESSFUL);
	return TRUE;
}

/**
 * Prepares a set of values for use in HTML forms when adding and editing records.
 *
 * @param array A loaded Dacomasy module that the panel is from.
 * @param number The index of the panel.
 * @param array An array of values that contain the values for the fields.
 * @return boolean Is true on success or false on error.
 */
function DacomasyUNPrepareValuesArray(&$module, $panelIndex, &$Values) {
	global $DacomasyField;
	$FieldSet = DacomasyGetStructure($module, $panelIndex);
	
	for ($f = 0; $f < count($FieldSet); $f++) $DacomasyField[$FieldSet[$f]['Type']]->UnprepareValues($FieldSet[$f], $Values);
	
	DacomasySetLastError(__DACOMASY_ERROR_SUCCESSFUL);
	return TRUE;
}

?>